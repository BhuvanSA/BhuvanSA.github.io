PROGRAM 10
Implement Functions: Count – Sort – Limit – Skip – Aggregate using MongoDB.
MongoDB Limit and Sort Records
• Limit () Method
• Sort () Method
> db.inventory_records.insertMany([
{ item_name: "canvas",item_qty: 110,item_size: { height: 29, weight: 36.5, uom: "cm" }, status
: "A" },{ item_name: "journal",item_qty: 35, item_size: { height: 15, weight: 22, uom: "cm" }, s
tatus: "A" },{ item_name: "mat",item_qty: 95, item_size: { height: 23.9, weight: 32.5, uom: "cm"
}, status: "A" },{ item_name: "mousepad",item_qty: 45, item_size: { height: 16, weight: 28.85, uo
m: "cm" }, status: "P" },{ item_name: "notebook",item_qty: 60, item_size: { height: 7.5, weight:
10, uom: "in" }, status: "P" },{ item_name: "paper",item_qty: 200, item_size: { height: 9.5, weig
ht: 12, uom: "in" }, status: "D" },{ item_name: "planner",item_qty: 75, item_size: { height: 25.85
, weight: 40, uom: "cm" }, status: "D" },{ item_name: "postcard",item_qty: 25, item_size: { heig
ht: 15, weight: 17.25, uom: "cm" }, status: "A" },{ item_name: "sketchbook",item_qty: 90, item_
size: { height: 13, weight: 23, uom: "cm" }, status: "A" },{ item_name: "sketch_pad",item_qty: 8
5, item_size: { height: 25.85, weight: 32.5, uom: "cm" }, status: "A" }] );
1) Limit() Method
The MongoDB limit() method is used to limit the number of Documents that will be shown. It
accepts a number that represents the number of Documents that will be projected.
Limit() Method
The MongoDB limit() method is used to limit the number of Documents that will be shown. It
accepts a number that represents the number of Documents that will be projected.
Syntax:
The Following is the syntax of limit() method.
> db.collectionname.find().limit(NUMBER)
➢ Example:
> db.inventory_records.find( { } )
> db.inventory_records.find().limit(4)
Dept. of AI & ML, GAT Prepared by: Prof. Lakshmikantha G C
2) sort() Method
➢ The MongoDB sort() method is used to perform the sorting of the input Document and
return their sorted order. The sort() method provides two types of sort order, the first one is 1 that
sort the Document in ascending order, and the second one is -1 that sort the Document in
descending order.
Syntax:
The Following is the syntax of sort() method.
> db.collectionname.find().sort{ fieldname_1: sort_order, fieldname_2: sort_order ... } }
➢ Example:
> db.inventory_records.find().sort({"item_qty": 1})
> db.inventory_records.find().sort({"item_qty": -1})
MongoDB Aggregation
MongoDB aggregation operations are used to process the data and return the processed records. The
aggregation operations group the multiple Documents and perform various operations on that group
of Documents to return a single value.
1)aggregate() Method
MongoDB uses the aggregate() method to perform the aggregation. Let us see the aggregate()
method in detail with the below example.
Dept. of AI & ML, GAT Prepared by: Prof. Lakshmikantha G C
Syntax:
The following is the syntax of aggregate() method.
> db.collectionname.aggregate(aggregate_operation)
> use mongodb_test
> db.orders_detail.insertMany([
{ _id: 101, customer_id: "Agard Eric", order_date: new Date("2019-03-
01"), item_price: 25, items_detail: [ { sku: "oranges", quantity: 5, item_price: 2.5 }, { sku: "apples"
, quantity: 5, item_price: 2.5 } ], status: "A" },
{ _id: 102, customer_id: "Agard Eric", order_date: new Date("2019-03-
08"), item_price: 70, items_detail: [ { sku: "oranges", quantity: 8, item_price: 2.5 }, { sku: "chocol
ates", quantity: 5, item_price: 10 } ], status: "A" },
{ _id: 103, customer_id: "Brown Jr Ronald ", order_date: new Date("2019-03-
08"), item_price: 50, items_detail: [ { sku: "oranges", quantity: 10, item_price: 2.5 }, { sku: "pears"
, quantity: 10, item_price: 2.5 } ], status: "A" },
{ _id: 104, customer_id: "Brown Jr Ronald ", order_date: new Date("2019-03-
18"), item_price: 25, items_detail: [ { sku: "oranges", quantity: 10, item_price: 2.5 } ], status: "A" }
,
{ _id: 105, customer_id: "Brown Jr Ronald ", order_date: new Date("2018-03-
19"), item_price: 50, items_detail: [ { sku: "chocolates", quantity: 5, item_price: 10 } ], status: "A"
},
{ _id: 106, customer_id: "Chester Shaunta", order_date: new Date("2018-03-
19"), item_price: 35, items_detail: [ { sku: "carrots", quantity: 10, item_price: 1.0 }, { sku: "apples"
, quantity: 10, item_price: 2.5 } ], status: "A" },
{ _id: 107, customer_id: "Chester Shaunta", order_date: new Date("2018-03-
20"), item_price: 25, items_detail: [ { sku: "oranges", quantity: 10, item_price: 2.5 } ], status: "A" }
,
{ _id: 108, customer_id: "Dixon Curtis", order_date: new Date("2017-03-
20"), item_price: 75, items_detail: [ { sku: "chocolates", quantity: 5, item_price: 10 }, { sku: "apple
s", quantity: 10, item_price: 2.5 } ], status: "A" },
{ _id: 109, customer_id: "Dixon Curtis", order_date: new Date("2017-03-
20"), item_price: 55, items_detail: [ { sku: "carrots", quantity: 5, item_price: 1.0 }, { sku: "apples",
quantity: 10, item_price: 2.5 }, { sku: "oranges", quantity: 10, item_price: 2.5 } ], status: "A" },
{ _id: 110, customer_id: "Dixon Curtis", order_date: new Date("2017-03-
23"), item_price: 25, items_detail: [ { sku: "oranges", quantity: 10, item_price: 2.5 } ], status: "A" }
])
2) $sum expression with aggregate() Method:
In the below example, in the first stage, we will use the $match expression to filter the Document of
"orders_detail" Collection who has the status= "A", in the second stage we will use $group
expression to group the Document by customer_id and calculate the sum of each customer_id.
Dept. of AI & ML, GAT Prepared by: Prof. Lakshmikantha G C
Example:
> db.orders_detail.aggregate([
{ $match: { status: "A" } }, { $group: { _id: "$customer_id", total: { $sum: "$item_price" } } }
])
3) $avg expression with aggregate() Method
The below example will fetch the average value of all matching Documents where status= "A".
Example:
> db.orders_detail.aggregate([
{ $match: { status: "A" } }, { $group: { _id: "$customer_id", total: { $avg: "$item_price" } } }
])
4) $min expression with aggregate() Method
The below example will fetch the minimum value of all matching Documents where status= "A".
Example:
> db.orders_detail.aggregate([
{ $match: { status: "A" } }, { $group: { _id: "$customer_id", total: { $min: "$item_price" } } }
])
Dept. of AI & ML, GAT Prepared by: Prof. Lakshmikantha G C
5) $max expression with aggregate() Method
The below example will fetch the maximum value of all matching Documents where status= "A".
Example:
> db.orders_detail.aggregate([
{ $match: { status: "A" } }, { $group: { _id: "$customer_id", total: { $max: "$item_price" } } }
])
6) $first expression with aggregate() Method
The $first expression returns the first Document from the group of Documents.
Example:
> db.orders_detail.aggregate([
{ $group: { _id: "$customer_id", total: { $first: "$item_price" } } }
])
7) $last expression with aggregate() Method
The $last expression returns the last Document from the group of Documents.
Example:
> db.orders_detail.aggregate([
{ $group: { _id: "$customer_id", total: { $last: "$item_price" } } }
])
MongoDB Indexing
1) db.collection_name.createIndex()
MongoDB createIndex() method is used to create an index on the Collection of Documents.
MongoDB creates a default index on the _id field of Collection and provides the facility to create
additional Indexes using the createIndex() method to support the queries and operation.
Dept. of AI & ML, GAT Prepared by: Prof. Lakshmikantha G C
Syntax:
The following is the syntax of the createIndex() method. The 1 represents the ascending order and
the -1 represents the descending order.
>db.collection_name.createIndex({keyname:1 or -1})
2) db.collection_name.getIndexes()
The MongoDB getIndexes() method is used to show the description of all Indexes of a Collection.
Syntax:
The following is the syntax of getIndexes() method.
>db.collectionname.getIndexes()
In the below example we can the Index detail of the Collection "orders_detail".
➢ Example:
> db.orders_detail.getIndexes()
3)
db.collection_name.dropIndex()
➢ MongoDB dropIndex() method is used to drop a specific index of a Document.
➢ Syntax:
The following is the syntax of dropIndex() method.
>db.collectionname.dropIndex({keyname: key_value})
Let us see the below example to drop an index that is created on Document "order_date" of
"orders_detail" Collection.
Example:
> db.orders_detail.dropIndex({"order_date": 1})
Dept. of AI & ML, GAT Prepared by: Prof. Lakshmikantha G C
4) db.collection_name.dropIndexes()
MongoDB dropIndexes() method is used to drop multiple indexes.
Syntax:
The following is the syntax of dropIndexes() method.
>db.collectionname.dropIndexes({keyname1: key_value1, keyname2: key_value2})
We will see an example to drop multiple indexes "order_date" =1, "Date" =-1 that is created above
for "orders_detail" Collection.
➢ Example:
> db.orders_detail.dropIndexes({"order_date": 1, "Date": -1})